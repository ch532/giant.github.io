# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5

                    - name: Setup Node.js environment
  uses: actions/setup-node@v3.9.1
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional

                      - name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.6.2
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

    include-hidden-files: # optional, default is false

                      - name: Download a Build Artifact
  uses: actions/download-artifact@v4.3.0
  with:
    # Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
    name: # optional
    # IDs of the artifacts to download, comma-separated. Either inputs `artifact-ids` or `name` can be used, but not both.
    artifact-ids: # optional
    # Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
    path: # optional
    # A glob pattern matching the artifacts that should be downloaded. Ignored if name is specified.
    pattern: # optional
    # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
    merge-multiple: # optional, default is false
    # The GitHub token used to authenticate with the GitHub API. This is required when downloading artifacts from a different repository or from a different workflow run. If this is not specified, the action will attempt to download artifacts from the current repository and the current workflow run.
    github-token: # optional
    # The repository owner and the repository name joined together by "/". If github-token is specified, this is the repository that artifacts will be downloaded from.
    repository: # optional, default is ${{ github.repository }}
    # The id of the workflow run where the desired download artifact was uploaded from. If github-token is specified, this is the run that artifacts will be downloaded from.
    run-id: # optional, default is ${{ github.run_id }}

                      - name: Preview Environments
  # You may pin to the exact commit or the version.
  # uses: UffizziCloud/preview-action@6f946b7c6d38a24e28a134e6f833783dfaaaf782
  uses: UffizziCloud/preview-action@v2.6.1
  with:
    # An alternate compose file
    compose-file: # optional, default is docker-compose.yaml
    # URL to Uffizzi
    server: # default is https://app.uffizzi.com
    # Uffizzi username
    username: # optional
    # Uffizzi password
    password: # optional
    # Uffizzi project slug
    project: # optional
    # Username to authenticate to GHCR
    ghcr-username: # optional
    # Password to authenticate to GHCR
    ghcr-access-token: # optional
    # Value of `github.event.number` context
    github-event-number: # optional
    # Value of `github.ref` context
    github-ref: # optional
    # Value of `github.repository` context
    github-repository: # optional
    # 
    request-token: # optional
    # 
    request-token-url: # optional
    # 
    dockerhub-username: # optional
    # 
    dockerhub-password: # optional
    # Azure username
    acr-username: # optional
    # Azure password
    acr-password: # optional
    # Azure registry url
    acr-registry-url: # optional
    # Amazon Web Services access key id
    aws-access-key-id: # optional
    # Amazon Web Services secret access key
    aws-secret-access-key: # optional
    # Amazon Web Services registry url
    aws-registry-url: # optional
    # Google Cloud service key
    gcloud-service-key: # optional
    # Custom docker registry username
    docker-registry-username: # optional
    # Custom docker registry password
    docker-registry-password: # optional
    # Custom docker registry url
    docker-registry-url: # optional

                - name: Deploy Formspree Forms
  # You may pin to the exact commit or the version.
  # uses: formspree/cli-action@1d71da19bad472d24581b7034f46ee74048b594a
  uses: formspree/cli-action@v1.0
  with:
    # Your Formspree Project Key
    deployKey: 

                      - name: Rational Functional Tester - UI Test GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-uitest-actions@5f41e8e36c09b960ec2701d231867d3155f2c672
  uses: IBM/devopsauto-uitest-actions@v1
  with:
    # The complete path to the Eclipse workspace, required if Config File is not specified
    workspace: 
    # The name of a project within the workspace to use, required if Config File is not specified
    project: 
    # The name of a test within the project to use. A test can be WebUI test, Compound test, Performance schedule or Accelerated Functional Test (AFT) suite, required if Config File is not specified
    suite: 
    # The path to the IMShared folder in your local installation, if it is not at default location. This is where plugins and product dependencies will be located by the execution agent, required if Config File is not specified
    imshared: # optional
    # Use this option to specify the complete path to a file that contains the parameters for a test run.
    configFile: # optional
    # You can use this parameter to specify the file directory path to store the exported HTTP test log. You can provide multiple parameter entries when running multiple tests. You must use a colon to separate the parameter entries. For example: c:/logexport.txt:c:/secondlogexport.txt
    exportLog: # optional
    # Use this option to export the unified report to any of the formats - PDF, XML or HTML. For example, to export the report to only the pdf format, you can input: type=unified;format=pdf;folder=path;filename=testreport. If you want to export the report to multiple formats, you can specify the file formats as comma-separated values.
    exportReport: # optional
    # You can use this option to specify a comma-separated list of report IDs along with exportstats or exportstatshtml to list the reports that you want to export in place of the default reports, or the reports selected under Preferences. To retrieve the report IDs, navigate to Window > Preferences > Test > Performance Test Reports > Export Reports from Rational Functional Tester and under Select reports to export, select the required reports, and click Copy ID to clipboard.
    exportStatReportList: # optional
    # Use this option to provide the complete path to a directory that you can use to store the exported report in a comma-separated values (CSV) format.
    exportStats: # optional
    # Use this field to enter one or more formats for the reports that you want to export by using a comma as a separator. The options are simple.csv, full.csv, simple.json, full.json, csv, and json. When you want to export both simple and full reports in json or csv format, you can specify json or csv as the options. The reports are saved to the location specified in the exportStats field. This field must be used in conjunction with exportStats field.
    exportStatsFormat: # optional
    # Use this option if you want to export web analytic results only. The results are exported in the specified directory. You can then analyze the results on a web browser without using the test workbench.
    exportStatsHtml: # optional
    # Path of the Project location to be imported. You can also use an empty workspace folder on your computer to import the UI Test project resources and run the tests.
    imports: # optional
    # Use this option to add labels to test results. To add multiple labels to a test result, you must separate each label by using a comma.
    labels: # optional
    # Determines whether a result file with the same name is overwritten. The default value, false, indicates that the new result file is created. If the value is true, the file is overwritten and retains the same file name
    overwrite: # optional
    # Use this argument to run a Web UI test in parallel on different browsers.
    protocolInput: # optional
    # You can use this parameter to publish test results to the Server. The format is: serverURL#project.name=projectName&amp;teamspace.name=teamspaceName.
    publish: # optional
    # You can use this option to publish the test results based on the completion status of the tests. The supported values are FAIL,PASS,INCONCLUSIVE,ERROR,ALL.
    publishFor: # optional
    # You can use this option to publish specific test results to the Server. The supported values are FT, STATS, TESTLOG.
    publishReports: # optional
    # Specify a name for the results file. If you do not specify a name, the test or schedule name appended by the timestamp is used for the name. The results file is stored in the Results directory. If you are running multiple tests, do not provide a name for the results file.
    results: # optional
    # Use this option to replace dataset values during a test or schedule run. You must ensure that both original and new datasets are in the same workspace and have the same column names. You must also include the path to the dataset. For example, /project_name/ds_path/ds_filename.csv:/project_name/ds_path/new_ds_filename.csv
    swapDatasets: # optional
    # Add text to display it in the User Comments row of the report.
    userComments: # optional
    # The complete path to the XML file that contains the variable name and value pairs.
    varFile: # optional
    # To specify the Java™ maximum heap size for the Java™ process that controls the command line playback, use this option with the -Xmx argument. For example, when you input -Xmx4096m, it specifies a maximum heap size of 4096m. To execute tests in parallel on all mobile devices, which are in passive mode, connected to the workbench and ready for playback, input the value: "-Dall.available.targets.in.parallel=true". To execute tests in parallel on all supported desktop browsers and connected mobile devices, input the value "-Dall.available.targets.in.parallel=all". To execute tests in parallel on selected desktop browsers and connected mobile devices, input the value "-Dall.available.targets.in.parallel=browser1,browswer2,browser3". You must separate browser names with a comma. For example, firefox, ff, chrome, ie, ie64, safari, "-Dall.available.targets.in.parallel=browser1,browser2,browser3".
    vmArgs: # optional

                      - name: Rational Functional Tester - UI Test GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-uitest-actions@5f41e8e36c09b960ec2701d231867d3155f2c672
  uses: IBM/devopsauto-uitest-actions@v1
  with:
    # The complete path to the Eclipse workspace, required if Config File is not specified
    workspace: 
    # The name of a project within the workspace to use, required if Config File is not specified
    project: 
    # The name of a test within the project to use. A test can be WebUI test, Compound test, Performance schedule or Accelerated Functional Test (AFT) suite, required if Config File is not specified
    suite: 
    # The path to the IMShared folder in your local installation, if it is not at default location. This is where plugins and product dependencies will be located by the execution agent, required if Config File is not specified
    imshared: # optional
    # Use this option to specify the complete path to a file that contains the parameters for a test run.
    configFile: # optional
    # You can use this parameter to specify the file directory path to store the exported HTTP test log. You can provide multiple parameter entries when running multiple tests. You must use a colon to separate the parameter entries. For example: c:/logexport.txt:c:/secondlogexport.txt
    exportLog: # optional
    # Use this option to export the unified report to any of the formats - PDF, XML or HTML. For example, to export the report to only the pdf format, you can input: type=unified;format=pdf;folder=path;filename=testreport. If you want to export the report to multiple formats, you can specify the file formats as comma-separated values.
    exportReport: # optional
    # You can use this option to specify a comma-separated list of report IDs along with exportstats or exportstatshtml to list the reports that you want to export in place of the default reports, or the reports selected under Preferences. To retrieve the report IDs, navigate to Window > Preferences > Test > Performance Test Reports > Export Reports from Rational Functional Tester and under Select reports to export, select the required reports, and click Copy ID to clipboard.
    exportStatReportList: # optional
    # Use this option to provide the complete path to a directory that you can use to store the exported report in a comma-separated values (CSV) format.
    exportStats: # optional
    # Use this field to enter one or more formats for the reports that you want to export by using a comma as a separator. The options are simple.csv, full.csv, simple.json, full.json, csv, and json. When you want to export both simple and full reports in json or csv format, you can specify json or csv as the options. The reports are saved to the location specified in the exportStats field. This field must be used in conjunction with exportStats field.
    exportStatsFormat: # optional
    # Use this option if you want to export web analytic results only. The results are exported in the specified directory. You can then analyze the results on a web browser without using the test workbench.
    exportStatsHtml: # optional
    # Path of the Project location to be imported. You can also use an empty workspace folder on your computer to import the UI Test project resources and run the tests.
    imports: # optional
    # Use this option to add labels to test results. To add multiple labels to a test result, you must separate each label by using a comma.
    labels: # optional
    # Determines whether a result file with the same name is overwritten. The default value, false, indicates that the new result file is created. If the value is true, the file is overwritten and retains the same file name
    overwrite: # optional
    # Use this argument to run a Web UI test in parallel on different browsers.
    protocolInput: # optional
    # You can use this parameter to publish test results to the Server. The format is: serverURL#project.name=projectName&amp;teamspace.name=teamspaceName.
    publish: # optional
    # You can use this option to publish the test results based on the completion status of the tests. The supported values are FAIL,PASS,INCONCLUSIVE,ERROR,ALL.
    publishFor: # optional
    # You can use this option to publish specific test results to the Server. The supported values are FT, STATS, TESTLOG.
    publishReports: # optional
    # Specify a name for the results file. If you do not specify a name, the test or schedule name appended by the timestamp is used for the name. The results file is stored in the Results directory. If you are running multiple tests, do not provide a name for the results file.
    results: # optional
    # Use this option to replace dataset values during a test or schedule run. You must ensure that both original and new datasets are in the same workspace and have the same column names. You must also include the path to the dataset. For example, /project_name/ds_path/ds_filename.csv:/project_name/ds_path/new_ds_filename.csv
    swapDatasets: # optional
    # Add text to display it in the User Comments row of the report.
    userComments: # optional
    # The complete path to the XML file that contains the variable name and value pairs.
    varFile: # optional
    # To specify the Java™ maximum heap size for the Java™ process that controls the command line playback, use this option with the -Xmx argument. For example, when you input -Xmx4096m, it specifies a maximum heap size of 4096m. To execute tests in parallel on all mobile devices, which are in passive mode, connected to the workbench and ready for playback, input the value: "-Dall.available.targets.in.parallel=true". To execute tests in parallel on all supported desktop browsers and connected mobile devices, input the value "-Dall.available.targets.in.parallel=all". To execute tests in parallel on selected desktop browsers and connected mobile devices, input the value "-Dall.available.targets.in.parallel=browser1,browswer2,browser3". You must separate browser names with a comma. For example, firefox, ff, chrome, ie, ie64, safari, "-Dall.available.targets.in.parallel=browser1,browser2,browser3".
    vmArgs: # optional
          
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

            - name: Run Authzed Test Server
  # You may pin to the exact commit or the version.
  # uses: authzed/action-testserver@f8a5a3c34f6d8ef0e64577c802d39728bdf406eb
  uses: authzed/action-testserver@v3
  with:
    # Version of `zed testserver` to use
    version: # optional, default is latest
          
